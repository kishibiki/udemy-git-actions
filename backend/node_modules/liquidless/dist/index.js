"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderObject = exports.renderString = void 0;
const flat_1 = __importDefault(require("flat"));
const rfdc_1 = __importDefault(require("rfdc"));
const filters_1 = require("./filters");
function renderString(template, props, options) {
    const flatProps = (0, flat_1.default)(props);
    let delimiters = ['{{', '}}'];
    if (options?.delimiters)
        delimiters = options.delimiters;
    return template.replaceAll(new RegExp(`\\${delimiters[0]}(.+?)${delimiters[1]}`, 'g'), (a, match) => {
        const [variable, ...filters] = match.split('|');
        const combinedFilters = { ...filters_1.defaultFilters, ...options?.filters };
        let variableValue = flatProps[variable.trim()];
        filters
            .map(filter => filter.trim())
            .forEach(filter => {
            const [filterMethod, ...args] = filter.split(':');
            let parsedArgs;
            if (args.length > 0) {
                parsedArgs = args[0].split(',')
                    .map(arg => arg.trim())
                    .map(arg => isNaN(parseInt(arg)) ? arg : parseInt(arg));
            }
            variableValue = combinedFilters[filterMethod]
                ? combinedFilters[filterMethod](variableValue, parsedArgs, variable.trim())
                : variableValue;
        });
        return variableValue
            ? variableValue.toString()
            : "undefined";
    });
}
exports.renderString = renderString;
function renderObject(object, props, options) {
    const cloned = (0, rfdc_1.default)()(object);
    function recursive(obj) {
        for (const key in obj) {
            if (typeof obj[key] === 'object') {
                recursive(obj[key]);
            }
            else if (typeof obj[key] === 'string') {
                obj[key] = renderString(obj[key], props, options);
            }
        }
    }
    recursive(cloned);
    return cloned;
}
exports.renderObject = renderObject;

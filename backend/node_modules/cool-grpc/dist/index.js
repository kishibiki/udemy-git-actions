"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRequest = void 0;
const grpc = __importStar(require("@grpc/grpc-js"));
const protobuf = __importStar(require("protobufjs"));
async function makeRequest(proto, { beforeRequest, afterResponse, ...clientConfig }) {
    return new Promise(async (resolve, reject) => {
        try {
            const root = await protobuf.load(proto);
            const [packageName, serviceName] = clientConfig.service.split(/\.(?=[^\.]+$)/);
            const { requestType, responseType, requestStream, responseStream } = root.lookup(`${packageName}.${clientConfig.method}`);
            if (requestStream && responseStream)
                return reject(new Error(`cool-grpc doesn't support bidirectional streams at the moment`));
            const requestMessageType = root.lookupType(requestType);
            const responseMessageType = root.lookupType(responseType);
            let credentials;
            if (clientConfig.tls && Object.keys(clientConfig.tls).length !== 0) {
                credentials = grpc.credentials.createSsl(clientConfig.tls.rootCerts
                    ? Buffer.isBuffer(clientConfig.tls.rootCerts)
                        ? clientConfig.tls.rootCerts
                        : Buffer.from(clientConfig.tls.rootCerts)
                    : undefined, clientConfig.tls.privateKey
                    ? Buffer.isBuffer(clientConfig.tls.privateKey)
                        ? clientConfig.tls.privateKey
                        : Buffer.from(clientConfig.tls.privateKey)
                    : undefined, clientConfig.tls.certChain
                    ? Buffer.isBuffer(clientConfig.tls.certChain)
                        ? clientConfig.tls.certChain
                        : Buffer.from(clientConfig.tls.certChain)
                    : undefined, clientConfig.tls.verifyOptions);
            }
            else {
                credentials = grpc.credentials.createInsecure();
            }
            const client = new grpc.Client(clientConfig.host, credentials);
            if (beforeRequest)
                beforeRequest(clientConfig);
            // Unary call
            if (!requestStream && !responseStream) {
                const message = requestMessageType.create(clientConfig.data);
                const messageEncoded = Buffer.from(requestMessageType.encode(message).finish());
                client.makeUnaryRequest(`/${packageName}.${serviceName}/${clientConfig.method}`, x => x, x => x, messageEncoded, (error, message) => {
                    if (error)
                        return reject(error);
                    if (message) {
                        const response = {
                            data: responseMessageType.decode(message).toJSON(),
                            size: message.byteLength
                        };
                        if (afterResponse)
                            afterResponse(response);
                        return resolve(response);
                    }
                });
            }
            // Client-side streaming
            if (requestStream) {
                const metadata = new grpc.Metadata();
                for (const key in clientConfig.metadata) {
                    metadata.add(key, clientConfig.metadata[key]);
                }
                const stream = client.makeClientStreamRequest(`/${packageName}.${serviceName}/${clientConfig.method}`, x => x, x => x, metadata, {}, (error, message) => {
                    if (error)
                        return reject(error);
                    if (message) {
                        const response = {
                            data: responseMessageType.decode(message).toJSON(),
                            size: message.byteLength
                        };
                        if (afterResponse)
                            afterResponse(response);
                        return resolve(response);
                    }
                });
                const data = Array.isArray(clientConfig.data) ? clientConfig.data : [clientConfig.data];
                data.map((messageData) => {
                    const message = requestMessageType.create(messageData);
                    const messageEncoded = Buffer.from(requestMessageType.encode(message).finish());
                    stream.write(messageEncoded);
                });
                stream.end();
            }
            // Server-side streaming
            if (responseStream) {
                const message = requestMessageType.create(clientConfig.data);
                const messageEncoded = Buffer.from(requestMessageType.encode(message).finish());
                const metadata = new grpc.Metadata();
                for (const key in clientConfig.metadata) {
                    metadata.add(key, clientConfig.metadata[key]);
                }
                const stream = client.makeServerStreamRequest(`/${packageName}.${serviceName}/${clientConfig.method}`, x => x, x => x, messageEncoded, metadata, {});
                const messages = [];
                let totalSize = 0;
                stream.on('data', (message) => {
                    if (message) {
                        messages.push(responseMessageType.decode(message).toJSON());
                        totalSize += message.byteLength;
                    }
                });
                stream.on('end', () => {
                    const response = {
                        data: messages,
                        size: totalSize
                    };
                    if (afterResponse)
                        afterResponse(response);
                    resolve(response);
                });
                stream.on('error', reject);
            }
        }
        catch (e) {
            reject(e);
        }
    });
}
exports.makeRequest = makeRequest;
